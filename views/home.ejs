<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Transactions List</title>
    <style>
        table {
            border-collapse: collapse;
            width: 100%;
        }
        th, td {
            border: 1px solid black;
            padding: 8px;
            text-align: left;
        }
        .stats-box {
            background-color: #f0f0f0;
            padding: 15px;
            margin-bottom: 20px;
            border: 1px solid #ddd;
            border-radius: 5px;
        }
    </style>
</head>
<body>
<h1>Transactions List</h1>

<select id="monthSelect">
    <option value="01">January</option>
    <option value="02">February</option>
    <option value="03" selected>March</option>
    <option value="04">April</option>
    <option value="05">May</option>
    <option value="06">June</option>
    <option value="07">July</option>
    <option value="08">August</option>
    <option value="09">September</option>
    <option value="10">October</option>
    <option value="11">November</option>
    <option value="12">December</option>
</select>

<div id="statsBox" class="stats-box">
    <h3>Statistics for <span id="selectedMonthYear"></span></h3>
    <p>Total Sale Amount: $<span id="totalSaleAmount">0</span></p>
    <p>Total Sold Items: <span id="totalSoldItems">0</span></p>
    <p>Total Not Sold Items: <span id="totalNotSoldItems">0</span></p>
</div>

<input type="text" id="searchInput" placeholder="Search transactions">

<table id="transactionsTable">
    <thead>
    <tr>
        <th>ID</th>
        <th>Title</th>
        <th>Price</th>
        <th>Description</th>
        <th>Category</th>
        <th>Date of Sale</th>
    </tr>
    </thead>
    <tbody id="transactionsBody">
    </tbody>
</table>

<button id="prevButton">Previous</button>
<button id="nextButton">Next</button>

<script>
    let currentPage = 1;
    const perPage = 10;
    let currentMonth = '03'; // Default to March
    let currentYear = new Date().getFullYear();

    function fetchStatistics() {
        let uri= `/api/statistics?month=${currentMonth}&year=${currentYear}`
        fetch(uri)
            .then(response => response.json())
            .then(data => {
                document.getElementById('totalSaleAmount').textContent = data.totalSales.toFixed(2);
                document.getElementById('totalSoldItems').textContent = data.soldItems;
                document.getElementById('totalNotSoldItems').textContent = data.notSoldItems;
                document.getElementById('selectedMonthYear').textContent = `${getMonthName(currentMonth)} ${currentYear}`;
            })
            .catch(error => console.error('Error fetching statistics:', error));
    }

    function getMonthName(monthNumber) {
        const date = new Date();
        date.setMonth(parseInt(monthNumber) - 1);
        return date.toLocaleString('default', { month: 'long' });
    }

    function fetchTransactions(page = 1, search = '') {
        let url = `/api/transactions?month=${currentYear}-${currentMonth}&page=${page}&perPage=${perPage}`;
        if (search) {
            url += `&search=${encodeURIComponent(search)}`;
        }

        fetch(url)
            .then(response => response.json())
            .then(data => {
                const tbody = document.getElementById('transactionsBody');
                tbody.innerHTML = '';
                data.transactions.forEach(transaction => {
                    const row = `
                            <tr>
                                <td>${transaction.id}</td>
                                <td>${transaction.title}</td>
                                <td>${transaction.price}</td>
                                <td>${transaction.description}</td>
                                <td>${transaction.category}</td>
                                <td>${new Date(transaction.dateOfSale).toLocaleDateString()}</td>
                            </tr>
                        `;
                    tbody.innerHTML += row;
                });

                currentPage = data.currentPage;
                document.getElementById('prevButton').disabled = currentPage <= 1;
                document.getElementById('nextButton').disabled = currentPage >= data.totalPages;
            })
            .catch(error => console.error('Error:', error));
    }

    document.getElementById('monthSelect').addEventListener('change', function() {
        currentMonth = this.value;
        currentPage = 1;
        fetchTransactions();
        fetchStatistics();
    });

    document.getElementById('searchInput').addEventListener('input', function() {
        currentPage = 1;
        fetchTransactions(1, this.value);
    });

    document.getElementById('prevButton').addEventListener('click', function() {
        if (currentPage > 1) {
            fetchTransactions(currentPage - 1, document.getElementById('searchInput').value);
        }
    });

    document.getElementById('nextButton').addEventListener('click', function() {
        fetchTransactions(currentPage + 1, document.getElementById('searchInput').value);
    });

    // Initial fetch
    fetchTransactions();
    fetchStatistics();
</script>
</body>
</html>